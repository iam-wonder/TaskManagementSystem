@page "/tasks"
@inject TaskService taskService
@inject NavigationManager _navigator



<button class="btn btn-sm btn-warning" @onclick="onCreate" >Create a Task</button>
<br />
@if (show_alert)
{
     <TaskManagementSystem.Pages.Components.Alert ></TaskManagementSystem.Pages.Components.Alert>
}
<br />

<MudTable Items="@taskList" Hover="true" SortLabel="Sort By" FixedHeader="@fixed_header"
          Bordered="@bordered" Dense="@dense" Striped="@striped" Filter="new Func<TaskModel,bool>(FilterFunc1)" Height="@(fixed_header ?"400px":"")">

    <ToolBarContent>
        <MudText Typo="Typo.h6">List of Tasks</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" 
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<TaskModel, object>(x=>x.task_id)">#</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled="@enabled" SortBy="new Func<TaskModel, object>(x=>x.task_name)">Task Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TaskModel, object>(x=>x.task_description)">Task Description</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TaskModel, object>(x=>x.Priority.priority_level)">Priority Level</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TaskModel, object>(x=>x.due_date)">Due Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TaskModel, object>(x=>x.task_staus)">Task Staus</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="task_id">@context.task_id</MudTd>
        <MudTd DataLabel="Task Name">@context.task_name</MudTd>
        <MudTd DataLabel="Task Description">@context.task_description</MudTd>
        <MudTd DataLabel="Priority Level">@context.Priority.priority_name</MudTd>
        <MudTd DataLabel="Due Date">@context.due_date.ToLongDateString()</MudTd>
        @if (@context.task_staus)
        {
            <MudTd DataLabel="Task Status">Completed</MudTd>
        }
        else
        {
            <MudTd DataLabel="Task Status">
                <p>Not Completed</p>
                @if(!context.task_staus && context.due_date.Date == DateTime.Today){
                    <p class="text-warning">Task Due Today</p>
                }
                @if (!context.task_staus && context.due_date.Date < DateTime.Today)
                {
                    <p class="text-danger">Task Overdue</p>
                }

            </MudTd>
        }
        @if (!context.task_staus)
        {
            <MudTd DataLabel="Mark Done Button">
                <MudButton Size="Size.Small" Variant="Variant.Filled" Class="indigo lighten-3" OnClick="()=> onMarkDone(context)">Mark as Done</MudButton>
            </MudTd>
            <MudTd DataLabel="Edit Task">
                <MudButton Size="Size.Small" Variant="Variant.Filled" Class="cyan" OnClick="()=> edit(context)">Edit Task</MudButton>
            </MudTd>
        } 
        
        <MudTd DataLabel="Delete Task">
            <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Error" OnClick="()=>delete(context)">Delete Task</MudButton>
        </MudTd>
    </RowTemplate>

</MudTable>

@if(taskList.Count() > 0)
{
    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
        <MudSwitch @bind-Checked="enabled" Color="Color.Info">Enable Sorting on Task Name</MudSwitch>
        <MudSwitch @bind-Checked="@fixed_header">Fixed Header</MudSwitch>
    </div>
}


@code {


    private bool enabled = true;
    private bool fixed_header = true;
    private bool markdone = false;
    private bool hover = true;
    private bool dense = false;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";

    private IEnumerable<TaskModel> taskList = new List<TaskModel>();

    bool show_alert = false;

    public string alert_message {get;set;} 

    protected async override Task OnInitializedAsync()
    {
        taskList = await taskService.Tasksasync();
    }

    private void edit(TaskModel task)
    {
        _navigator.NavigateTo("/tasks/edit/"+ task.id);
    }
    private async void delete (TaskModel task)
    {
        await taskService.DeleteTask(task.id);
        show_alert = true;
        alert_message = "Task was succefully deleted";
        _navigator.NavigateTo("/tasks", forceLoad:true);

    }
    private void onCreate()
    {
        _navigator.NavigateTo("/tasks/create");
    }
    private async void onMarkDone(TaskModel task)
    {
        task.task_staus = true;
        await taskService.UpdateTask(task);

        _navigator.NavigateTo("/tasks", forceLoad: true);
    }
    private bool FilterFunc1(TaskModel taskItem) => FilterFunc(taskItem, searchString1);

    private bool FilterFunc(TaskModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.task_description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.task_name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        return false;
    }
}
